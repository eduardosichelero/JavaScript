Em nossa vida cotidiana, há momentos em que precisamos repetir alguma atividade repetidamente. Por exemplo, fechar cada botão ao vestir uma camisa, lavar uma pilha de pratos um por um ou fazer a contagem regressiva de dez para um antes de cantar Feliz Ano Novo. Tarefas repetitivas são vitais e, às vezes, também precisamos fazê-las em nosso código JavaScript. Neste vídeo, você aprenderá sobre construções em loop e como elas podem ser usadas para realizar tarefas repetitivas. Lembre-se da instrução condicional IF que executa um bloco de código se uma determinada condição for atendida essa sequência é executada apenas uma vez. E se você precisasse fazer isso várias vezes? Bem, para fazer isso, você precisa fazer algo chamado loops. Em JavaScript, os desenvolvedores usam loops para executar continuamente blocos de código repetidos até que uma determinada condição seja satisfeita. Os loops são semelhantes aos condicionais e essa condição deve ser satisfeita para que o código seja executado. Mas os loops têm um parâmetro adicional, que tem muitos nomes. Mas, no momento, você pode pensar nisso como um incrementador ou contador de loop. Para entender por que a variável do contador é tão importante, vamos considerar uma situação da vida real. Estamos em contagem regressiva de 10 a 1, antes de cantar Feliz Ano Novo. Em outras palavras, somente depois de concluirmos a contagem, poderemos começar a cantar. Aqueles que contestamos precisam ter um valor específico, um e só depois disso, podemos cantar uma música. Em JavaScript, o contador pode ser qualquer variável ou qualquer número, mas na programação, é comum usar a letra I. O papel do contador é vital aqui, pois, sem ele, seu loop não saberá nem quando começar nem quando terminar, e poderá ser executado indefinidamente. Isso é conhecido como loop infinito. Por exemplo, digamos que você queira programar uma sequência de contagem como 1,2,3. Você pode fazer isso apenas usando o método console.log. No entanto, estamos essencialmente realizando a mesma atividade aqui. A única diferença é que estamos alterando o número que está sendo registrado no console. Usando um loop, poderíamos realizar a mesma tarefa com mais eficiência e usando menos linhas de código. Embora isso possa parecer um ganho mínimo para contar até três, imagine contar até 100. Usando um loop, você pode conseguir isso com exatamente as mesmas três linhas de código. Você só precisa atualizar a condição. Há muitos tipos de loops, como o loop for, o loop while e o loop aninhado. Você aprenderá sobre os loops aninhados posteriormente nesta lição. Por enquanto, vamos explorar a extremidade oposta em loop. O primeiro é o for-loop, que é usado para repetir um bloco de código um determinado número de vezes. O for-loop é um loop estruturado com uma estrutura condicional específica em que uma variável contadora deve ser definida. Em seguida, uma condição deve ser especificada e, finalmente, o contador deve ser incrementado. Isso pode ser um aumento ou uma diminuição, dependendo de suas necessidades. O loop while é semelhante ao for-loop. Ele também será executado enquanto a condição retornar verdadeira. No entanto, o contador de partida é colocado fora do loop while e o incremento é feito dentro do corpo do loop. Parabéns. Neste vídeo, você aprendeu sobre a construção de loops usando os loops far e while. Embora você possa obter os mesmos resultados usando um loop for ou while como desenvolvedor iniciante, talvez seja mais fácil trabalhar com o for-loop. Isso ocorre porque o loop é independente com toda a lógica do loop em um só lugar. Além disso, lembre-se sempre de atualizar o valor do contador, caso contrário, o loop poderá se repetir para sempre.